{"version":3,"sources":["reducers/articles.js","reducers/index.js","reducers/serviceWorkerStatus.js","actions/index.js","components/NewsFeed.js","components/ShowMessage.js","containers/Main.js","index.js"],"names":["articles","state","action","type","rootReducer","combineReducers","swUpdateAvail","update","userSwUpdateSelection","status","swUpdateAvailable","NewsFeed","props","Event","Label","alt","src","image","Content","Summary","User","href","url","target","rel","articleTitle","Date","date","Extra","text","description","images","articleImage","Meta","Like","name","ShowMessage","bind","close","window","location","reload","this","updateStatus","style","position","zIndex","color","onClick","Component","defaultProps","Main","getArticles","feed","map","article","i","key","web_url","lead_paragraph","articleNumber","multimedia","abstract","moment","updated_date","fromNow","textAlign","marginTop","as","attached","fontSize","length","connect","dispatch","ownProps","process","base","fetch","then","res","json","error","console","log","data","sortedData","response","docs","sort","a","b","date1","receivedArticles","updateServiceWorker","middleware","thunk","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById","addEventListener","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","subscribe","getState","postMessage","catch","registerValidSW"],"mappings":"4OASeA,G,OATE,WAAwB,IAAvBC,EAAsB,uDAAf,GAAIC,EAAW,uCACtC,OAAOA,EAAOC,MACZ,IAAK,oBACH,OAAOD,EAAOF,SAChB,QACA,OAAOC,KCKIG,EANKC,YAAgB,CAClCL,WACAM,cCI2B,WAAyB,IAAxBL,EAAuB,uDAAjB,KAAMC,EAAW,uCACnD,OAAOA,EAAOC,MACZ,IAAK,sBACH,OAAOD,EAAOK,OAChB,QACE,OAAON,IDRXO,sBCNmC,WAAyB,IAAxBP,EAAuB,uDAAjB,KAAMC,EAAW,uCAC3D,OAAOA,EAAOC,MACZ,IAAK,uBACH,OAAOD,EAAOO,OAChB,QACE,OAAOR,M,2BCUAS,EAAoB,SAAAH,GAC/B,MAAO,CACLJ,KAAM,sBACNI,W,qDCYWI,EA5BE,SAACC,GAAD,OACf,kBAAC,IAAD,KACE,kBAAC,IAAKC,MAAN,KACE,kBAAC,IAAKC,MAAN,KACE,yBAAKC,IAAI,UAAUC,IAAKJ,EAAMK,SAEhC,kBAAC,IAAKC,QAAN,KACE,kBAAC,IAAKC,QAAN,KACE,kBAAC,IAAKC,KAAN,CAAWC,KAAMT,EAAMU,IAAKC,OAAO,SAASC,IAAI,uBAAuBZ,EAAMa,cAC7E,kBAAC,IAAKC,KAAN,KAAYd,EAAMe,OAEpB,kBAAC,IAAKC,MAAN,CAAYC,MAAI,GACbjB,EAAMkB,aAET,kBAAC,IAAKF,MAAN,CAAYG,QAAM,GAChB,uBAAGV,KAAMT,EAAMU,IAAKC,OAAO,SAASC,IAAI,uBAAsB,yBAAKT,IAAKH,EAAMa,aAAcT,IAAKJ,EAAMoB,iBAEzG,kBAAC,IAAKC,KAAN,KACE,kBAAC,IAAKC,KAAN,KACE,kBAAC,IAAD,CAAMC,KAAK,SADb,gB,0BClBJC,E,YACJ,WAAYxB,GAAQ,IAAD,8BACf,4CAAMA,KAEDL,OAAS,EAAKA,OAAO8B,KAAZ,gBACd,EAAKC,MAAQ,EAAKA,MAAMD,KAAX,gBAJE,E,sEAQjBE,OAAOC,SAASC,SAChBC,KAAK9B,MAAM+B,cAAa,K,8BAIxBD,KAAK9B,MAAM+B,cAAa,K,+BAQxB,OACE,kBAAC,IAAD,CAASC,MALF,CACPC,SAAU,QACVC,OAAO,MAGYC,MAAM,QAAzB,wBAEE,kBAAC,IAAD,CAAQC,QAASN,KAAKnC,QAAtB,UAEA,kBAAC,IAAD,CAAQyC,QAASN,KAAKJ,OAAtB,kB,GA3BkBW,aAkC1Bb,EAAYc,aAAe,CACzBP,aAAc,IAGDP,QCjCTe,E,YACJ,WAAYvC,GAAQ,IAAD,8BACjB,4CAAMA,KACDX,MAAQ,CACXgB,MAAO,yFAHQ,E,iFAQjByB,KAAK9B,MAAMwC,gB,+BAGH,IACDnC,EAASyB,KAAKzC,MAAdgB,MADA,EAOHyB,KAAK9B,MAJPZ,EAHK,EAGLA,SACAM,EAJK,EAILA,cACAE,EALK,EAKLA,sBACAmC,EANK,EAMLA,aAGEU,EAAOrD,EAASsD,KAAI,SAACC,EAASC,GAEhC,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLlC,IAAKiC,EAAQG,QACbjC,aAAc8B,EAAQI,eACtBC,cAAeJ,EAAE,EACjBxB,aAAcuB,EAAQM,WAAW,GAAGvC,IAAtB,mCAAwDiC,EAAQM,WAAW,GAAGvC,KAAQL,EACpGa,YAAayB,EAAQO,SACrB7C,MAAQA,EACRU,KAAMoC,IAAOR,EAAQS,cAAcC,eAIzC,OACE,kBAAC,IAAD,CAAWC,UAAU,SAAStB,MAAO,CAACuB,UAAW,SAC9C7D,IAA2C,IAA1BE,GAChB,kBAAC,EAAD,CAAamC,aAAc,SAAClC,GAAD,OAAYkC,EAAalC,MAEtD,kBAAC,IAAD,CAAQ2D,GAAG,MAAX,gCACA,kBAAC,IAAD,CAAQA,GAAG,KAAMC,SAAS,OAA1B,uCAEE,kBAAC,IAAD,CAAWzB,MAAO,CAAC0B,SAAU,QAASJ,UAAU,SAAhD,YACUlE,EAASuE,SAGrB,kBAAC,IAAD,CAASF,UAAQ,GACdhB,Q,GAjDQJ,aAuEJuB,eAfS,SAAAvE,GAAK,MAAK,CAChCD,SAAUC,EAAMD,SAChBM,cAAeL,EAAMK,cACrBE,sBAAuBP,EAAMO,0BAGJ,SAACiE,EAAUC,GAAX,MAAyB,CAClDtB,YADkD,WAEhD,OAAOqB,GH/CF,SAAAA,GACL,IAAMhB,EAAG,kBAAckB,oCACjBC,EAAI,UAAMD,4DAAN,aAEVE,IAAM,GAAD,OAAID,GAAJ,OAAWnB,IACbqB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UACf,SAAAC,GAAK,OAAIC,QAAQC,IAAI,qBAAsBF,MAE5CH,MAAK,SAAAM,GACJ,IAEIC,EAFWD,EAAKE,SAASC,KAEHC,MAAK,SAAiBC,EAAGC,GACjD,IAAMC,EAAQ,IAAIjE,KAAK+D,EAAEzB,cAEzB,OADc,IAAItC,KAAKgE,EAAE1B,cACV2B,KAEnBlB,EAvC0B,SAAAzE,GAC9B,MAAO,CACLG,KAAM,oBACNH,YAoCW4F,CAAiBP,WGiC9B1C,aAJkD,SAIrClC,GACX,OAAOgE,EHlEwB,SAAAhE,GACjC,MAAO,CACLN,KAAM,uBACNM,UG+DgBoF,CAAoBpF,QAIzB+D,CAA8CrB,GCpEvD2C,EAAa,CAACC,KAKpB,IAAMC,EAAQC,YACZ7F,EACA8F,IAAe,WAAf,EAAmBJ,IAGrBK,IAASC,OACP,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,OAEFK,SAASC,eAAe,SAOtB/D,OAAOgE,iBAAiB,QAAQ,YAMpC,SAAyBC,GACvBC,UAAUC,cACPC,SAASH,GACT1B,MAAK,SAAA8B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WAChC9B,QAAQC,IAAI2B,GACoB,cAA3BA,EAAiB7G,QACfwG,UAAUC,cAAcO,YAExBjB,EAAMvB,SAAS/D,GAAkB,IAEjCsF,EAAMkB,WAAU,WACgBlB,EAAMmB,WAA/B3G,uBAGHsG,EAAiBM,YAAY,CAAC7G,QAAQ,QAI5C2E,QAAQC,IAAI,4CAMrBkC,OAAM,SAAApC,GACLC,QAAQD,MAAM,4CAA6CA,MAhCzDqC,CADS,UAAM3C,GAAN,gB","file":"static/js/main.1a3f7eb1.chunk.js","sourcesContent":["const articles = (state= [], action) => {\n  switch(action.type) {\n    case \"RECEIVED_ARTICLES\":\n      return action.articles;\n    default: \n    return state\n  }\n};\n\nexport default articles;","import {combineReducers} from \"redux\";\nimport articles from \"./articles\";\nimport {userSwUpdateSelection, swUpdateAvail} from \"./serviceWorkerStatus\";\n\nconst rootReducer = combineReducers({\n  articles,\n  swUpdateAvail,\n  userSwUpdateSelection\n});\n\nexport default rootReducer;","\nexport const userSwUpdateSelection = (state=null, action) => {\n  switch(action.type) {\n    case \"USER_APPROVED_UPDATE\":\n      return action.status;\n    default: \n      return state\n  }\n};\n\nexport const swUpdateAvail = (state=null, action) => {\n  switch(action.type) {\n    case \"SW_UPDATE_AVAILABLE\":\n      return action.update;\n    default: \n      return state\n  }\n};\n\n","import fetch from \"cross-fetch\";\n\nexport const receivedArticles = articles => {\n  return {\n    type: \"RECEIVED_ARTICLES\",\n    articles\n  }\n}\n\nexport const updateServiceWorker = status => {\n  return {\n    type: \"USER_APPROVED_UPDATE\",\n    status\n  }\n}\n\nexport const swUpdateAvailable = update => {\n  return {\n    type: \"SW_UPDATE_AVAILABLE\",\n    update\n  }\n}\n\nexport const fetchArticles = () => {\n\n  return dispatch => {\n    const key = `api-key=${process.env.REACT_APP_NYT_API_KEY}`\n    const base = `${process.env.REACT_APP_NYT_API_URL}q=travel&`\n\n    fetch(`${base}${key}`)\n      .then(res => res.json(),\n        error => console.log('An error occurred.', error)\n      )\n      .then(data => {\n        let articles = data.response.docs;\n        //arrange by date\n        let sortedData = articles.sort(function compare(a, b) {\n          const date1 = new Date(a.updated_date);\n          const date2 = new Date(b.updated_date);\n          return date2 - date1;\n        });\n      dispatch(receivedArticles(sortedData))\n    }) \n  }\n}\n","import React from 'react';\nimport {Feed, Icon} from 'semantic-ui-react'\n\nconst NewsFeed = (props) => (\n  <Feed>\n    <Feed.Event>\n      <Feed.Label>\n        <img alt=\"profile\" src={props.image} />\n      </Feed.Label>\n      <Feed.Content>\n        <Feed.Summary>\n          <Feed.User href={props.url} target=\"_blank\" rel=\"noopener noreferrer\">{props.articleTitle}</Feed.User> \n          <Feed.Date>{props.date}</Feed.Date>\n        </Feed.Summary>\n        <Feed.Extra text>\n          {props.description}\n        </Feed.Extra>\n        <Feed.Extra images>\n          <a href={props.url} target=\"_blank\" rel=\"noopener noreferrer\"><img alt={props.articleTitle} src={props.articleImage} /></a>\n        </Feed.Extra>\n        <Feed.Meta>\n          <Feed.Like>\n            <Icon name='like' />\n               4 Likes\n          </Feed.Like>\n        </Feed.Meta>\n      </Feed.Content>\n    </Feed.Event>\n  </Feed>\n);\n\nexport default NewsFeed;","import React, {Component} from \"react\";\nimport {Message, Button} from \"semantic-ui-react\";\n\nclass ShowMessage extends Component {\n  constructor(props) {\n      super(props);\n\n      this.update = this.update.bind(this);\n      this.close = this.close.bind(this);\n    }\n\n  update() {\n    window.location.reload();\n    this.props.updateStatus(true);\n  }\n  \n  close() {\n    this.props.updateStatus(false);\n  }\n\n  render() {\n    const s ={\n      position: \"fixed\",\n      zIndex:\"99\"\n    }\n    return(\n      <Message style={s} color='blue'>\n        New Content available\n        <Button onClick={this.update}>Update\n        </Button>\n        <Button onClick={this.close}>Forget it\n        </Button>\n      </Message>\n    )\n  }\n}\n\nShowMessage.defaultProps = {\n  updateStatus: []\n}\n\nexport default ShowMessage;","import React, { Component } from 'react';\nimport {Container, Header, Segment} from \"semantic-ui-react\";\nimport {connect} from 'react-redux';\nimport {fetchArticles, updateServiceWorker} from \"../actions\";\nimport NewsFeed from \"../components/NewsFeed\";\nimport moment from \"moment\";\nimport ShowMessage from \"../components/ShowMessage\";\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      image: \"https://upload.wikimedia.org/wikipedia/commons/4/40/New_York_Times_logo_variation.jpg\",\n    };\n  }\n\n  componentDidMount(){\n    this.props.getArticles();\n  }\n\n  render() {\n    const {image} = this.state;\n    const {\n      articles, \n      swUpdateAvail, \n      userSwUpdateSelection,\n      updateStatus\n    } = this.props;\n\n    let feed = articles.map((article, i) => {\n      //Handle when no article image is present in API\n      return (\n        <NewsFeed\n          key={i} \n          url={article.web_url}\n          articleTitle={article.lead_paragraph}\n          articleNumber={i+1} \n          articleImage={article.multimedia[0].url ? `https://static01.nyt.com/${article.multimedia[0].url}` : image}\n          description={article.abstract} \n          image= {image}\n          date={moment(article.updated_date).fromNow()}\n        />\n      )   \n    });\n    return (\n      <Container textAlign=\"center\" style={{marginTop: \"20px\"}}>\n        {swUpdateAvail && userSwUpdateSelection !== false &&\n          <ShowMessage updateStatus={(status) => updateStatus(status)}/>\n        }\n        <Header as=\"h1\"> Practicing Service Workers </Header>\n        <Header as=\"h3\"  attached=\"top\"> \n          New York Times: Top Stories - Travel\n          <Container style={{fontSize: \"12px\"}} textAlign=\"right\">\n          Results: {articles.length}\n          </Container> \n        </Header>\n        <Segment attached>\n          {feed}\n        </Segment>\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  articles: state.articles,\n  swUpdateAvail: state.swUpdateAvail,\n  userSwUpdateSelection: state.userSwUpdateSelection\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  getArticles() {\n    return dispatch(fetchArticles());\n  },\n  updateStatus(status) {\n    return dispatch(updateServiceWorker(status));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps) (Main);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport {applyMiddleware, createStore} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport {createLogger} from 'redux-logger'\nimport rootReducer from './reducers';\nimport './index.css';\nimport {swUpdateAvailable} from \"./actions\";\nimport Main from './containers/Main';\n\nconst middleware = [thunk];\nif(process.env.NODE_ENV !== \"production\") {\n  middleware.push(createLogger());\n}\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(...middleware)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Main />\n  </Provider>, \n  document.getElementById('root')\n);\n\n//Register SW, moved into root to get access to store\nregister();\n\nfunction register() {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/sw.js`;\n        registerValidSW(swUrl);\n    });\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n        \tconsole.log(installingWorker)\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n                //If new SW is available, send signal (data) to actions to alert user\n                store.dispatch(swUpdateAvailable(true));\n                //Listen for updates to state which will happen when user selects \"update\" in user notification\n                store.subscribe(() => {\n                  let {userSwUpdateSelection} = store.getState();\n                  if(userSwUpdateSelection){\n                    //Send signal to service worker to skipWaiting\n                    installingWorker.postMessage({update: true});\n                   }\n                  })\n            } else {\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n       };\n     })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n  });\n}"],"sourceRoot":""}